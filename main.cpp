#include <avr/io.h>
#include <avr/cpufunc.h>
#include <avr/pgmspace.h>

#define F_CPU 16000000UL
#include <util/delay.h>

#define D_I 0x01
#define CS1 0x02
#define CS2 0x04
#define NEG_RES 0x08

// L L H H   H H H L/H == ON/OFF
#define LCD_ON   0x3F
// L H ADDR[6bit]
#define SET_ADDR 0x40
// H L H H H PAGE[3bit], 64 bytes per page
#define SET_PAGE 0xB8
// H H FIRST_LINE[6bit]
#define SET_SCROLL 0xC0

// LCD base address
#define BASE_ADDR 0xFE00
// E pin
#define E PD5
// LED :)
#define LED PB0

typedef unsigned char BYTE;

const BYTE font_6x8[8*256] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //   0
0x00, 0x00, 0x00, 0x1c, 0x10, 0x10, 0x10, 0x10, //   1
0x00, 0x00, 0x00, 0x70, 0x10, 0x10, 0x10, 0x10, //   2
0x10, 0x10, 0x10, 0x1c, 0x00, 0x00, 0x00, 0x00, //   3
0x10, 0x10, 0x10, 0x70, 0x00, 0x00, 0x00, 0x00, //   4
0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, //   5
0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, //   6
0x00, 0x30, 0x78, 0x78, 0x30, 0x00, 0x00, 0x00, //   7
0x7c, 0x6c, 0x44, 0x44, 0x6c, 0x7c, 0x7c, 0x00, //   8
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //   9
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //   10
0x0c, 0x0c, 0x10, 0x70, 0x50, 0x50, 0x70, 0x00, //   11
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //   12
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //   13
0x1c, 0x64, 0x4c, 0x74, 0x44, 0x4c, 0xc0, 0x00, //  14
0x54, 0x38, 0x28, 0x6c, 0x28, 0x38, 0x54, 0x00, //  15
0x10, 0x10, 0x10, 0x7c, 0x10, 0x10, 0x10, 0x10, //  16
0x04, 0x0c, 0x1c, 0x3c, 0x1c, 0x0c, 0x04, 0x00, //  17
0x10, 0x38, 0x10, 0x10, 0x10, 0x10, 0x38, 0x10, //  18
0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x00, 0x28, //  19
0x3c, 0x54, 0x54, 0x34, 0x14, 0x14, 0x14, 0x14, //  20
0x10, 0x10, 0x10, 0x7c, 0x00, 0x00, 0x00, 0x00, //  21
0x00, 0x00, 0x00, 0x7c, 0x10, 0x10, 0x10, 0x10, //  22
0x10, 0x10, 0x10, 0x70, 0x10, 0x10, 0x10, 0x10, //  23
0x10, 0x38, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, //  24
0x10, 0x10, 0x10, 0x1c, 0x10, 0x10, 0x10, 0x10, //  25
0x00, 0x00, 0x08, 0x7c, 0x08, 0x00, 0x00, 0x00, //  26
0x00, 0x00, 0x20, 0x7c, 0x20, 0x00, 0x00, 0x00, //  27
0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0xfc, 0x00, //  28
0x00, 0x00, 0x48, 0x7c, 0x48, 0x00, 0x00, 0x00, //  29
0x10, 0x10, 0x38, 0x38, 0x38, 0x7c, 0x00, 0x00, //  30
0x7c, 0x38, 0x38, 0x38, 0x10, 0x10, 0x00, 0x00, //  31
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //   32
0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x10, 0x00, // ! 33
0x28, 0x28, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, // " 34
0x28, 0x28, 0x7c, 0x50, 0xf8, 0x50, 0x50, 0x00, // # 35
0x10, 0x3c, 0x50, 0x70, 0x1c, 0x14, 0x78, 0x10, // $ 36
0xe0, 0xa0, 0xe8, 0x30, 0x5c, 0x14, 0x1c, 0x00, // % 37
0x38, 0x20, 0x30, 0x54, 0x4c, 0x48, 0x34, 0x00, // & 38
0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ' 39
0x10, 0x10, 0x20, 0x20, 0x20, 0x20, 0x10, 0x10, // ( 40
0x20, 0x20, 0x10, 0x10, 0x10, 0x10, 0x20, 0x20, // ) 41
0x00, 0x10, 0x54, 0x38, 0x54, 0x10, 0x00, 0x00, // * 42
0x00, 0x10, 0x10, 0x7c, 0x10, 0x10, 0x00, 0x00, // + 43
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x40, // , 44
0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, // - 45
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, // . 46
0x04, 0x08, 0x08, 0x10, 0x10, 0x20, 0x20, 0x40, // / 47
0x38, 0x44, 0x44, 0x44, 0x44, 0x44, 0x38, 0x00, // 0 48
0x70, 0x10, 0x10, 0x10, 0x10, 0x10, 0x7c, 0x00, // 1 49
0x38, 0x44, 0x04, 0x08, 0x10, 0x20, 0x7c, 0x00, // 2 50
0x38, 0x44, 0x04, 0x38, 0x04, 0x44, 0x38, 0x00, // 3 51
0x08, 0x18, 0x28, 0x48, 0x7c, 0x08, 0x08, 0x00, // 4 52
0x7c, 0x40, 0x78, 0x04, 0x04, 0x04, 0x78, 0x00, // 5 53
0x38, 0x44, 0x40, 0x78, 0x44, 0x44, 0x38, 0x00, // 6 54
0x7c, 0x04, 0x08, 0x08, 0x10, 0x10, 0x10, 0x00, // 7 55
0x38, 0x44, 0x44, 0x38, 0x44, 0x44, 0x38, 0x00, // 8 56
0x38, 0x44, 0x44, 0x3c, 0x04, 0x44, 0x38, 0x00, // 9 57
0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, // : 58
0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x40, // ; 59
0x00, 0x04, 0x38, 0x40, 0x38, 0x04, 0x00, 0x00, // < 60
0x00, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0x00, 0x00, // = 61
0x00, 0x40, 0x38, 0x04, 0x38, 0x40, 0x00, 0x00, // > 62
0x30, 0x78, 0xcc, 0xb4, 0xec, 0xfc, 0x68, 0x30, // ? 63
0x78, 0x88, 0xb8, 0xa8, 0xa8, 0xb8, 0x84, 0x70, // @ 64
0x10, 0x10, 0x28, 0x28, 0x38, 0x44, 0x44, 0x00, // A 65
0x78, 0x44, 0x44, 0x78, 0x44, 0x44, 0x78, 0x00, // B 66
0x3c, 0x64, 0x40, 0x40, 0x40, 0x64, 0x3c, 0x00, // C 67
0x78, 0x4c, 0x44, 0x44, 0x44, 0x4c, 0x78, 0x00, // D 68
0x7c, 0x40, 0x40, 0x7c, 0x40, 0x40, 0x7c, 0x00, // E 69
0x7c, 0x40, 0x40, 0x7c, 0x40, 0x40, 0x40, 0x00, // F 70
0x38, 0x64, 0x40, 0x4c, 0x44, 0x64, 0x3c, 0x00, // G 71
0x44, 0x44, 0x44, 0x7c, 0x44, 0x44, 0x44, 0x00, // H 72
0x7c, 0x10, 0x10, 0x10, 0x10, 0x10, 0x7c, 0x00, // I 73
0x38, 0x08, 0x08, 0x08, 0x08, 0x48, 0x30, 0x00, // J 74
0x44, 0x48, 0x50, 0x60, 0x50, 0x48, 0x44, 0x00, // K 75
0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x7c, 0x00, // L 76
0x44, 0x6c, 0x6c, 0x54, 0x44, 0x44, 0x44, 0x00, // M 77
0x44, 0x64, 0x64, 0x54, 0x4c, 0x4c, 0x44, 0x00, // N 78
0x38, 0x44, 0x44, 0x44, 0x44, 0x44, 0x38, 0x00, // O 79
0x78, 0x44, 0x44, 0x78, 0x40, 0x40, 0x40, 0x00, // P 80
0x38, 0x44, 0x44, 0x44, 0x44, 0x44, 0x38, 0x0c, // Q 81
0x78, 0x44, 0x44, 0x78, 0x44, 0x44, 0x44, 0x00, // R 82
0x38, 0x44, 0x40, 0x38, 0x04, 0x44, 0x38, 0x00, // S 83
0x7c, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, // T 84
0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x38, 0x00, // U 85
0x44, 0x44, 0x28, 0x28, 0x28, 0x10, 0x10, 0x00, // V 86
0x84, 0xb4, 0xb4, 0x78, 0x48, 0x48, 0x48, 0x00, // W 87
0x44, 0x28, 0x28, 0x10, 0x28, 0x28, 0x44, 0x00, // X 88
0x44, 0x28, 0x28, 0x10, 0x10, 0x10, 0x10, 0x00, // Y 89
0x7c, 0x04, 0x08, 0x10, 0x20, 0x40, 0x7c, 0x00, // Z 90
0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, // [ 91
0x40, 0x20, 0x20, 0x10, 0x10, 0x08, 0x08, 0x04, // \ 92
0x30, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x30, // ] 93
0x20, 0x50, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, // ^ 94
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, // _ 95
0x40, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ` 96
0x00, 0x00, 0x78, 0x04, 0x3c, 0x44, 0x3c, 0x00, // a 97
0x40, 0x40, 0x78, 0x44, 0x44, 0x44, 0x78, 0x00, // b 98
0x00, 0x00, 0x38, 0x40, 0x40, 0x40, 0x38, 0x00, // c 99
0x04, 0x04, 0x3c, 0x44, 0x44, 0x44, 0x3c, 0x00, // d 100
0x00, 0x00, 0x38, 0x44, 0x7c, 0x40, 0x3c, 0x00, // e 101
0x18, 0x20, 0x20, 0x78, 0x20, 0x20, 0x20, 0x00, // f 102
0x00, 0x00, 0x3c, 0x44, 0x44, 0x3c, 0x04, 0x38, // g 103
0x40, 0x40, 0x78, 0x44, 0x44, 0x44, 0x44, 0x00, // h 104
0x10, 0x00, 0x30, 0x10, 0x10, 0x10, 0x7c, 0x00, // i 105
0x10, 0x00, 0x70, 0x10, 0x10, 0x10, 0x10, 0x60, // j 106
0x40, 0x40, 0x48, 0x50, 0x70, 0x48, 0x44, 0x00, // k 107
0x60, 0x20, 0x20, 0x20, 0x20, 0x20, 0x18, 0x00, // l 108
0x00, 0x00, 0x78, 0x54, 0x54, 0x54, 0x54, 0x00, // m 109
0x00, 0x00, 0x78, 0x44, 0x44, 0x44, 0x44, 0x00, // n 110
0x00, 0x00, 0x38, 0x44, 0x44, 0x44, 0x38, 0x00, // o 111
0x00, 0x00, 0x78, 0x44, 0x44, 0x78, 0x40, 0x40, // p 112
0x00, 0x00, 0x3c, 0x44, 0x44, 0x3c, 0x04, 0x04, // q 113
0x00, 0x00, 0x3c, 0x24, 0x20, 0x20, 0x20, 0x00, // r 114
0x00, 0x00, 0x3c, 0x40, 0x38, 0x04, 0x78, 0x00, // s 115
0x20, 0x20, 0x78, 0x20, 0x20, 0x20, 0x38, 0x00, // t 116
0x00, 0x00, 0x44, 0x44, 0x44, 0x44, 0x3c, 0x00, // u 117
0x00, 0x00, 0x44, 0x28, 0x28, 0x28, 0x10, 0x00, // v 118
0x00, 0x00, 0x44, 0x54, 0x28, 0x28, 0x28, 0x00, // w 119
0x00, 0x00, 0x6c, 0x28, 0x10, 0x28, 0x6c, 0x00, // x 120
0x00, 0x00, 0x44, 0x28, 0x28, 0x10, 0x10, 0x60, // y 121
0x00, 0x00, 0x7c, 0x08, 0x10, 0x20, 0x7c, 0x00, // z 122
0x18, 0x10, 0x10, 0x60, 0x10, 0x10, 0x18, 0x00, // { 123
0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, // | 124
0x30, 0x10, 0x10, 0x0c, 0x10, 0x10, 0x30, 0x00, // } 125
0x00, 0x00, 0x00, 0x68, 0x58, 0x00, 0x00, 0x00, // ~ 126
0x3c, 0x24, 0x24, 0x24, 0x24, 0x24, 0x3c, 0x00, //  127
0xf0, 0x40, 0x58, 0x64, 0x44, 0x44, 0x54, 0x08, // –Ç 128
0x10, 0x7c, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00, // –É 129
0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x40, 0x00, // ‚Äö 130
0x10, 0x00, 0x78, 0x40, 0x40, 0x40, 0x40, 0x00, // —ì 131
0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x28, 0x28, // ‚Äû 132
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x00, // ‚Ä¶ 133
0x10, 0x10, 0x7c, 0x10, 0x10, 0x10, 0x10, 0x10, // ‚Ä† 134
0x10, 0x10, 0x7c, 0x10, 0x10, 0x7c, 0x10, 0x10, // ‚Ä° 135
0x38, 0x40, 0xf0, 0x40, 0xf0, 0x40, 0x38, 0x00, // ‚Ç¨ 136
0xe0, 0xa8, 0xf0, 0x20, 0x7c, 0xd4, 0x7c, 0x00, // ‚Ä∞ 137
0x70, 0x50, 0x50, 0x5c, 0x54, 0x54, 0x98, 0x00, // –â 138
0x00, 0x00, 0x10, 0x20, 0x20, 0x10, 0x00, 0x00, // ‚Äπ 139
0x90, 0x90, 0x90, 0xf8, 0x94, 0x94, 0x98, 0x00, // –ä 140
0x10, 0x44, 0x48, 0x50, 0x70, 0x48, 0x44, 0x00, // –å 141
0xf0, 0x40, 0x50, 0x68, 0x44, 0x44, 0x44, 0x00, // –ã 142
0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x78, 0x20, // –è 143
0x40, 0xe0, 0x40, 0x70, 0x48, 0x48, 0x48, 0x10, // —í 144
0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ‚Äò 145
0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ‚Äô 146
0x28, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ‚Äú 147
0x28, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ‚Äù 148
0x00, 0x00, 0x38, 0x38, 0x38, 0x00, 0x00, 0x00, // ‚Ä¢ 149
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, // ‚Äì 150
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, // ‚Äî 151
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, // ¬ò 152
0xf4, 0x5c, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, // ‚Ñ¢ 153
0x00, 0x00, 0x70, 0x50, 0x5c, 0x54, 0x9c, 0x00, // —ô 154
0x00, 0x00, 0x20, 0x10, 0x10, 0x20, 0x00, 0x00, // ‚Ä∫ 155
0x00, 0x00, 0x90, 0x90, 0xfc, 0x94, 0x98, 0x00, // —ö 156
0x00, 0x10, 0x40, 0x48, 0x70, 0x48, 0x44, 0x00, // —ú 157
0x40, 0xe0, 0x40, 0x70, 0x48, 0x48, 0x48, 0x00, // —õ 158
0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x78, 0x20, // —ü 159
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ¬† 160
0x10, 0x44, 0x28, 0x28, 0x10, 0x10, 0x60, 0x00, // –é 161
0x00, 0x10, 0x44, 0x28, 0x28, 0x10, 0x10, 0x60, // —û 162
0x38, 0x08, 0x08, 0x08, 0x08, 0x48, 0x30, 0x00, // –à 163
0x00, 0x44, 0x38, 0x28, 0x38, 0x44, 0x00, 0x00, // ¬§ 164
0x04, 0x7c, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00, // “ê 165
0x00, 0x10, 0x10, 0x10, 0x00, 0x10, 0x10, 0x10, // ¬¶ 166
0x38, 0x40, 0x30, 0x48, 0x48, 0x30, 0x08, 0x70, // ¬ß 167
0x28, 0x7c, 0x40, 0x7c, 0x40, 0x40, 0x7c, 0x00, // –Å 168
0x78, 0x84, 0xb4, 0xa4, 0xb4, 0x84, 0x78, 0x00, // ¬© 169
0x3c, 0x64, 0x40, 0x78, 0x40, 0x64, 0x3c, 0x00, // –Ñ 170
0x00, 0x00, 0x28, 0x50, 0x50, 0x28, 0x00, 0x00, // ¬´ 171
0x00, 0x00, 0x00, 0x7c, 0x04, 0x00, 0x00, 0x00, // ¬¨ 172
0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, // ¬≠ 173
0x78, 0xb4, 0xac, 0xb4, 0xac, 0x84, 0x78, 0x00, // ¬Æ 174
0x28, 0x7c, 0x10, 0x10, 0x10, 0x10, 0x7c, 0x00, // –á 175
0x70, 0x50, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, // ¬∞ 176
0x00, 0x10, 0x10, 0x7c, 0x10, 0x10, 0x7c, 0x00, // ¬± 177
0x7c, 0x10, 0x10, 0x10, 0x10, 0x10, 0x7c, 0x00, // –Ü 178
0x10, 0x00, 0x30, 0x10, 0x10, 0x10, 0x7c, 0x00, // —ñ 179
0x08, 0x08, 0x78, 0x40, 0x40, 0x40, 0x40, 0x00, // “ë 180
0x00, 0x00, 0x48, 0x48, 0x48, 0x68, 0x58, 0x40, // ¬µ 181
0x3c, 0x74, 0x74, 0x34, 0x14, 0x14, 0x14, 0x14, // ¬∂ 182
0x00, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x00, // ¬∑ 183
0x28, 0x00, 0x38, 0x44, 0x7c, 0x40, 0x3c, 0x00, // —ë 184
0x00, 0x00, 0x9c, 0x9c, 0xd0, 0xb0, 0x9c, 0x00, // ‚Ññ 185
0x00, 0x00, 0x38, 0x40, 0x70, 0x40, 0x38, 0x00, // —î 186
0x00, 0x00, 0x50, 0x28, 0x28, 0x50, 0x00, 0x00, // ¬ª 187
0x10, 0x00, 0x70, 0x10, 0x10, 0x10, 0x10, 0x60, // —ò 188
0x38, 0x44, 0x40, 0x38, 0x04, 0x44, 0x38, 0x00, // –Ö 189
0x00, 0x00, 0x3c, 0x40, 0x38, 0x04, 0x78, 0x00, // —ï 190
0x28, 0x00, 0x30, 0x10, 0x10, 0x10, 0x7c, 0x00, // —ó 191
0x10, 0x10, 0x28, 0x28, 0x38, 0x44, 0x44, 0x00, // –ê 192
0x7c, 0x40, 0x40, 0x78, 0x44, 0x44, 0x78, 0x00, // –ë 193
0x78, 0x44, 0x44, 0x78, 0x44, 0x44, 0x78, 0x00, // –í 194
0x7c, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00, // –ì 195
0x38, 0x48, 0x48, 0x48, 0x48, 0x48, 0xfc, 0x84, // –î 196
0x7c, 0x40, 0x40, 0x7c, 0x40, 0x40, 0x7c, 0x00, // –ï 197
0x54, 0x54, 0x38, 0x38, 0x54, 0x54, 0x54, 0x00, // –ñ 198
0x38, 0x44, 0x04, 0x38, 0x04, 0x44, 0x38, 0x00, // –ó 199
0x44, 0x4c, 0x4c, 0x54, 0x64, 0x64, 0x44, 0x00, // –ò 200
0x54, 0x44, 0x4c, 0x54, 0x64, 0x64, 0x44, 0x00, // –ô 201
0x44, 0x48, 0x50, 0x60, 0x50, 0x48, 0x44, 0x00, // –ö 202
0x38, 0x48, 0x48, 0x48, 0x48, 0x48, 0x88, 0x00, // –õ 203
0x44, 0x6c, 0x6c, 0x54, 0x44, 0x44, 0x44, 0x00, // –ú 204
0x44, 0x44, 0x44, 0x7c, 0x44, 0x44, 0x44, 0x00, // –ù 205
0x38, 0x44, 0x44, 0x44, 0x44, 0x44, 0x38, 0x00, // –û 206
0x7c, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x00, // –ü 207
0x78, 0x44, 0x44, 0x78, 0x40, 0x40, 0x40, 0x00, // –† 208
0x3c, 0x64, 0x40, 0x40, 0x40, 0x64, 0x3c, 0x00, // –° 209
0x7c, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, // –¢ 210
0x44, 0x28, 0x28, 0x38, 0x10, 0x30, 0x60, 0x00, // –£ 211
0x10, 0x38, 0x54, 0x54, 0x54, 0x38, 0x10, 0x00, // –§ 212
0x44, 0x28, 0x28, 0x10, 0x28, 0x28, 0x44, 0x00, // –• 213
0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0xfc, 0x04, // –¶ 214
0x44, 0x44, 0x44, 0x7c, 0x04, 0x04, 0x04, 0x00, // –ß 215
0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xf8, 0x00, // –® 216
0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xfc, 0x04, // –© 217
0xc0, 0x40, 0x78, 0x44, 0x44, 0x44, 0x78, 0x00, // –™ 218
0x84, 0x84, 0xe4, 0x94, 0x94, 0x94, 0xe4, 0x00, // –´ 219
0x40, 0x40, 0x40, 0x78, 0x44, 0x44, 0x78, 0x00, // –¨ 220
0x78, 0x4c, 0x04, 0x3c, 0x04, 0x4c, 0x78, 0x00, // –≠ 221
0x98, 0xa4, 0xa4, 0xe4, 0xa4, 0xa4, 0x98, 0x00, // –Æ 222
0x78, 0x88, 0x88, 0x78, 0x48, 0x48, 0x88, 0x00, // –Ø 223
0x00, 0x00, 0x78, 0x04, 0x3c, 0x44, 0x7c, 0x00, // –∞ 224
0x3c, 0x60, 0x78, 0x44, 0x44, 0x44, 0x38, 0x00, // –± 225
0x00, 0x00, 0x78, 0x48, 0x70, 0x48, 0x78, 0x00, // –≤ 226
0x00, 0x00, 0x78, 0x40, 0x40, 0x40, 0x40, 0x00, // –≥ 227
0x00, 0x00, 0x38, 0x48, 0x48, 0x48, 0xfc, 0x84, // –¥ 228
0x00, 0x00, 0x38, 0x44, 0x7c, 0x40, 0x3c, 0x00, // –µ 229
0x00, 0x00, 0x54, 0x38, 0x38, 0x54, 0x54, 0x00, // –∂ 230
0x00, 0x00, 0x78, 0x08, 0x30, 0x08, 0x78, 0x00, // –∑ 231
0x00, 0x00, 0x48, 0x58, 0x58, 0x68, 0x48, 0x00, // –∏ 232
0x30, 0x00, 0x48, 0x58, 0x58, 0x68, 0x48, 0x00, // –π 233
0x00, 0x00, 0x48, 0x50, 0x70, 0x48, 0x44, 0x00, // –∫ 234
0x00, 0x00, 0x38, 0x48, 0x48, 0x48, 0xc8, 0x00, // –ª 235
0x00, 0x00, 0x44, 0x6c, 0x6c, 0x54, 0x44, 0x00, // –º 236
0x00, 0x00, 0x48, 0x48, 0x78, 0x48, 0x48, 0x00, // –Ω 237
0x00, 0x00, 0x38, 0x44, 0x44, 0x44, 0x38, 0x00, // –æ 238
0x00, 0x00, 0x78, 0x48, 0x48, 0x48, 0x48, 0x00, // –ø 239
0x00, 0x00, 0x78, 0x44, 0x44, 0x78, 0x40, 0x40, // —Ä 240
0x00, 0x00, 0x38, 0x40, 0x40, 0x40, 0x38, 0x00, // —Å 241
0x00, 0x00, 0x7c, 0x10, 0x10, 0x10, 0x10, 0x00, // —Ç 242
0x00, 0x00, 0x44, 0x28, 0x28, 0x10, 0x10, 0x60, // —É 243
0x10, 0x10, 0x38, 0x54, 0x54, 0x54, 0x38, 0x10, // —Ñ 244
0x00, 0x00, 0x6c, 0x28, 0x10, 0x28, 0x6c, 0x00, // —Ö 245
0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x7c, 0x04, // —Ü 246
0x00, 0x00, 0x48, 0x48, 0x78, 0x08, 0x08, 0x00, // —á 247
0x00, 0x00, 0x54, 0x54, 0x54, 0x54, 0x7c, 0x00, // —à 248
0x00, 0x00, 0x54, 0x54, 0x54, 0x54, 0x7c, 0x04, // —â 249
0x00, 0x00, 0xc0, 0x40, 0x78, 0x48, 0x78, 0x00, // —ä 250
0x00, 0x00, 0x44, 0x44, 0x74, 0x54, 0x74, 0x00, // —ã 251
0x00, 0x00, 0x40, 0x40, 0x78, 0x48, 0x78, 0x00, // —å 252
0x00, 0x00, 0x70, 0x08, 0x78, 0x08, 0x70, 0x00, // —ç 253
0x00, 0x00, 0x98, 0xa4, 0xe4, 0xa4, 0x98, 0x00, // —é 254
0x00, 0x00, 0x38, 0x48, 0x38, 0x28, 0x48, 0x00  // —è 255
};

const char test_string[] = "–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞!";
const char test_string2[] = "Test string!";
const char fw_ver[] PROGMEM = "0.1 Test FrameBuf";

// –∑–∞–≥–æ–Ω—è–µ–º –±—É—Ñ–µ—Ä –≤ –∫–æ–Ω–µ—Ü –ø–∞–º—è—Ç–∏, –∏–Ω–∞—á–µ gcc –¥–µ—Ä—ë—Ç—Å—è —Å –Ω–∞—à–∏–º —É–∫–∞–∑–∞—Ç–µ–ª–µ–º
// 128 bits x 64 == 16 byte x 64
BYTE * const FrameBuf = (BYTE *)(32768 - 2048);

// —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω—á–∏–∫–∞ 16 –Ω–∞ 8 —Å–∏–º–≤–æ–ª–æ–≤ (—Å–∏–º–≤–æ–ª - —ç—Ç–æ 8 –Ω–∞ 8 –ø–∏–∫—Å–µ–ª–æ–≤)
// –ø—É—Å—Ç—å –º–ª–∞–¥—à–∏–µ 4 –±–∏—Ç–∞ –±—É–¥—É—Ç X, –∞ —Å—Ç–∞—Ä—à–∏–µ 4 - Y
int pos = 0; // sizeof(int) == 2

void SendCmd(uint8_t Cmd, bool LeftLCD, bool RightLCD);
void SendData(BYTE Data, bool LeftLCD, bool RightLCD);
void Park();

// Ok
void Transposition(BYTE c[8], bool LeftLCD, bool RightLCD) {
  for (int j = 0; j < 8; j++) { // 8 bits, 8 times
    BYTE res = 0;
    for (int i = 0; i < 8; i++) { // 8 vars, 8 index
      if (c[i] & 0x80) // MSB, left bit
        res |= 0x80;  // MSB, bottom bit

      c[i] <<= 1;

      if (i < 7)
        res >>= 1; // shift pixel up
    }
    SendData(res, LeftLCD, RightLCD);
  }
}

// Ok
void ByteMatrix2LCD(BYTE *buf, bool LeftLCD, bool RightLCD) {
  BYTE c[8];
  for (int line = 0; line < 8; line++) {
    c[line] = *buf;
    buf += 16; // next line
  }

  Transposition(c, LeftLCD, RightLCD);
}

// Ok
void Line2LCD(BYTE *line) {
  BYTE *q = line;
  for (int sym = 0; sym < 16; sym++) {
    bool LeftLCD = sym < 8;
    bool RightLCD = !LeftLCD;
    ByteMatrix2LCD(q, LeftLCD, RightLCD);
    q++;
  }
}

void Frame2LCD(BYTE *buf) {
  BYTE *p = buf;
  for (int line = 0; line < 8; line++) {
    SendCmd(SET_ADDR, true, true);
    SendCmd(SET_PAGE | line, true, true);
    Line2LCD(p);
    p += 16 * 8; // next char row
  }
  Park();
}

void ShiftFrameUp() {
  // —Å–¥–≤–∏–≥–∞–µ–º –≤—Å—é –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω–∞ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∞ 8 –ª–∏–Ω–∏–π) –≤–≤–µ—Ä—Ö
  for (int i = 0; i < 16 * (64 - 8); i++)
    FrameBuf[i] = FrameBuf[i + 16 * 8];
  // —á–∏—Å—Ç–∏–º –Ω–∏–∂–Ω–∏–µ 8 –ª–∏–Ω–∏–π
  for (int i = 0; i < 16 * 8; i++)
    FrameBuf[i + 16 * (64 - 8)] = 0;
}

void NextPos() {
  pos++;
  if (pos < 16 * 8)
    return;

  pos = 16 * 7; // –Ω–∞—á–∞–ª–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏
  ShiftFrameUp();
}

// –≤—ã–≤–æ–¥–∏–º —Å–∏–º–≤–æ–ª c –Ω–∞ –ø–æ–∑–∏—Ü–∏—é pos
// –ø–µ—á–∞–ª—å –≤ —Ç–æ–º, —á—Ç–æ "–≤–∏–¥–µ–æ–ø–∞–º—è—Ç—å" —Å–æ—Å—Ç–æ–∏—Ç –Ω–µ –∏–∑ —Å–ø–ª–æ—à–Ω—ã—Ö —Å—Ç—Ä–æ–∫
// –∞ –∏–∑ –±–ª–æ–∫–æ–≤ –ø–æ 8 —Å—Ç—Ä–æ–∫, –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ 16 –±–∞–π—Ç
// –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ –æ–∑–Ω–∞—á–∞–µ—Ç
// —á—Ç–æ –≤ –ø–∏–∫—Å–µ–ª—è—Ö/–ª–∏–Ω–∏—è—Ö –Ω–∞–¥–æ —Å–¥–≤–∏–Ω—É—Ç—å—Å—è –Ω–∞ 8 –≤–Ω–∏–∑
//
void Print(char c) {
  BYTE *dst = FrameBuf;
  dst += (pos & 0x0F); // X
  dst += (pos & 0xF0) << 3; // Y
  int ascii = c;
  for (int i = 0; i < 8; i++) {
    *dst = pgm_read_byte(&font_6x8[ascii*8 + i]);
    dst += 16; // —Å–ª–µ–¥—É—é—â–∞—è –ª–∏–Ω–∏—è
  }
}

// –≤—ã–≤–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É
//
void Print(const char *p) {
  while (*p) {
    Print(*p++);
    NextPos();
  }
}

void Write(uint16_t Addr, uint8_t Data) {
    uint8_t *ptr = (uint8_t *)Addr;
    *ptr = Data;
    PORTD |= (1 << E);
    _delay_us(1.3);
    PORTD &= ~(1 << E);
    _delay_us(10);
}

void Send(uint8_t CmdOrData, uint8_t Ctrl, bool LeftLCD, bool RightLCD) {
    if (!LeftLCD)
        Ctrl |= CS1;
    if (!RightLCD)
        Ctrl |= CS2;
    // —Å–∏–≥–Ω–∞–ª —Å–±—Ä–æ—Å–∞ - –∏–Ω–≤–µ—Ä—Å–Ω—ã–π, –æ–Ω –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    Write(BASE_ADDR | Ctrl | NEG_RES, CmdOrData);
}

inline void SendCmd(uint8_t Cmd, bool LeftLCD, bool RightLCD) {
    Send(Cmd, 0, LeftLCD, RightLCD);
}

inline void SendData(uint8_t Data, bool LeftLCD, bool RightLCD) {
    Send(Data, D_I, LeftLCD, RightLCD);
}

void ResetLCD() {
    Write(BASE_ADDR | NEG_RES, 0);
    Write(BASE_ADDR, 0); // —Å–Ω–∏–º–∞–µ–º —Å–∏–≥–Ω–∞–ª —Å –Ω–æ–∂–∫–∏ —Å–±—Ä–æ—Å–∞, —Ç–µ–º —Å–∞–º—ã–º —Å–±—Ä–∞—Å—ã–≤–∞–µ–º LCD
    _delay_us(10);      // –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–æ–∂–∫–∞ –∏–Ω–≤–µ—Ä—Å–Ω–∞—è, –∞–∫—Ç–∏–≤–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å - 0!!!
    Write(BASE_ADDR | NEG_RES, 0);
    _delay_us(10);
}

void Init(bool LeftLCD, bool RightLCD) {
    ResetLCD();

    SendCmd(SET_SCROLL, LeftLCD, RightLCD);
    SendCmd(SET_ADDR, LeftLCD, RightLCD);
    SendCmd(SET_PAGE, LeftLCD, RightLCD);

    // —á–∏—Å—Ç–∏–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    for (uint8_t p = 0; p < 8; p++) {
        SendCmd(SET_PAGE | p, LeftLCD, RightLCD);
        SendCmd(SET_ADDR, LeftLCD, RightLCD);
        for (uint8_t a = 0; a < 64; a++)
            SendData(0, LeftLCD, RightLCD);
    }

    // –≤–∫–ª—é—á–∞–µ–º
    SendCmd(LCD_ON, LeftLCD, RightLCD);

    // –≤—ã–≤–æ–¥–∏–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    SendCmd(SET_ADDR, LeftLCD, RightLCD);
    SendCmd(SET_PAGE, LeftLCD, RightLCD);
    for (uint8_t i = 0; i < 8*8; i++) {
        BYTE c = pgm_read_byte(&font_6x8[i + 192*8]);
        SendData(c, LeftLCD, RightLCD);
    }
}

char str[32];

volatile BYTE x;

void Park() {
    BYTE *b = 0;
    x = *b;
}

void ShowASCII(uint16_t Shift) {
    for (uint8_t pos_y = 0; pos_y < 8; pos_y++) {
      for (uint8_t pos_x = 0; pos_x < 16; pos_x++) {
        for (uint8_t sym_y = 0; sym_y < 8; sym_y++) {
          BYTE c = pgm_read_byte(&font_6x8[Shift + pos_y*16*8 + pos_x*8 + sym_y]);
          FrameBuf[pos_y*16*8 + pos_x + sym_y*16] = c; // 1 LCD line == 16 RAM bytes
        }
      }
    }
}

void ClrFrame() {
  pos = 0;
  for (int i = 0; i < 1024; i++)
    FrameBuf[i] = 0;
}

int main(void) {
    DDRB |= (1 << LED);
    PORTB |= (1 << LED);
    DDRD |= (1 << E);
    // enable XRAM
    MCUCR |= (1 << SRE);

    Init(true, true);
    Park();
    PORTB &= ~(1 << LED);
    _delay_ms(1000);
    PORTB |= (1 << LED);
    _delay_ms(1000);

    ClrFrame();
    Frame2LCD(FrameBuf);
    _delay_ms(2000);

    while(1) {
        ShowASCII(0);
        Frame2LCD(FrameBuf);
        PORTB |= (1 << LED);
        _delay_ms(2000);

        for (int i = 1; i < 8; i++) {
            ShowASCII(i*128);
            Frame2LCD(FrameBuf);
            PORTB &= ~(1 << LED);
            _delay_ms(250);
            PORTB |= (1 << LED);
            _delay_ms(250);
        }

        ClrFrame();
        Print(test_string2);
        Frame2LCD(FrameBuf);
        PORTB |= (1 << LED);
        _delay_ms(2000);

        ClrFrame();
        Print(test_string);
        Frame2LCD(FrameBuf);
        PORTB &= ~(1 << LED);
        _delay_ms(2000);
    }

    return 0;
}
